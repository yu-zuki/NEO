// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "CPPOdaEnum.h"
#include "GameFramework/Character.h"
#include "GameFramework/CharacterMovementComponent.h"
#include "Kismet/GameplayStatics.h"
#include "Kismet/KismetSystemLibrary.h"
#include "Animation/AnimMontage.h"
#include "Runtime/Engine/Classes/Kismet/KismetMathLibrary.h"
#include "Math/UnrealMathUtility.h"		//RandRangeを使うために必要なヘッダー
#include "Components/BoxComponent.h"
#include "Engine/EngineTypes.h"
#include "Components/StaticMeshComponent.h"
#include "Templates/SubclassOf.h"
#include "PlayerCharacter.h"

#include "OdaBase.generated.h"


UCLASS()
class NEO_API AOdaBase : public ACharacter
{
	GENERATED_BODY()

public:
	// Sets default values for this character's properties
	AOdaBase();

protected:
	// Called when the game starts or when spawned
	virtual void BeginPlay() override;

public:	

	// Called every frame
	virtual void Tick(float DeltaTime) override;

	// Called to bind functionality to input
	virtual void SetupPlayerInputComponent(class UInputComponent* PlayerInputComponent) override;

	//シーンコンポーネント
	UPROPERTY()
		USceneComponent* Parent;

	//ボスキャラクター
	UPROPERTY()
	AOdaBase* OdaNobunaga;

	//剣のコリジョン
	UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "BoxComp", meta = (AllowPrivateAccess = "true"))
	UBoxComponent* BoxComp;

	//キャラクタームーブメント
	UPROPERTY()
		UCharacterMovementComponent* NobunagaMovement;

	//ダメージ処理
	UFUNCTION()
	float TakeDamage(float Damage, struct FDamageEvent const& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser);

	//ダメージタイプクラス
	UPROPERTY()
		TSubclassOf < class UDamageType > DamageTypeClass;

	//時間の取得
	int FlameCounter;

	//前方向をとる
	UPROPERTY()
	FVector ForwardDirection;

	//列挙型
	ECPPOdaEnum OdaMoveEnum;

	//待機関数
	UPROPERTY()
	bool SwitchStayMove;

	//int型のカウンター
	int WaitTime;


	//ボスのステートでの処理
	void OdaStay1(int Timer);

	void OdaMove1(int Timer);

	void OdaMove2(int Timer);

	void OdaBack1(int Timer);

	void OdaAttack1(int Timer);

	void OdaAttack2(int Timer);


	//通常の移動速度
	UPROPERTY(EditAnywhere)
		float OdaSpeed;

	//急な速度
	UPROPERTY(EditAnywhere)
		float FastOdaSpeed;
	
	//行動変更時間設定
	UPROPERTY(EditAnywhere)
		int ChangeFlontTimer;

	//モーションを一回だけ流すための変数
	bool isMotionPlaying;

	//衝撃波の出現タイミングの調整
	UPROPERTY()
		bool isShockWaveSpawnTiming;

	//衝撃波の出現タイミングの調整するための関数
	UFUNCTION()
		void ShockWaveSpawnFlagChange();

	//衝撃波を出現させる為の変数
	UPROPERTY(EditAnywhere)
		TSubclassOf<AActor>ShockWaveSpawn;

	//攻撃のフラグ
	UPROPERTY(BlueprintReadOnly)
		bool IsAttackNow;

	//攻撃のフラグを切り替える為の関数
	UFUNCTION()
		void AttackFlagChange();

	//体力
	UPROPERTY()
	float Health;

	//HPが連続で減らないようにロック
	UPROPERTY()
		bool isHPLock;

	//HPが連続で減らないようにロックするための関数
	UFUNCTION()
		void HPLock();

	//プレイヤーの方向に向ける処理
	UFUNCTION()
		void ToPlayerRotate();

	//ノックバックするモーション
	UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "AniMontage", meta = (AllowPrivateAccess = "true"))
		class UAnimMontage* AnimMontage_BossKnockMontage;		//メモ：変数を作る際AnimMontage_は必須らしい

	//攻撃する仮モーション
	UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "AniMontage", meta = (AllowPrivateAccess = "true"))
		class UAnimMontage* AnimMontage_BossAttack1;

	//衝撃波攻撃する仮モーション
	UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "AniMontage", meta = (AllowPrivateAccess = "true"))
		class UAnimMontage* AnimMontage_BossAttack2;

	//前方移動
	UFUNCTION()
		void BossMove(float Speed , FVector MoveSize);

	//後方移動
	UFUNCTION()
		void BackMove(float Speed);
};
